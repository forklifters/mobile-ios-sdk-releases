#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>

FOUNDATION_EXPORT double AppcuesVersionNumber;

FOUNDATION_EXPORT const unsigned char AppcuesVersionString[];

NS_ASSUME_NONNULL_BEGIN

// MARK: - AppcuesUserProfileUpdate

@interface AppcuesUserProfileUpdate : NSObject

@property (nonatomic, strong, readonly) NSDictionary<NSString *, id> *customProperties;

- (AppcuesUserProfileUpdate *)initWithCustomProperties:(NSDictionary<NSString *, id> *)customProperties;

@end

// MARK: - AppcuesUserEvent

@interface AppcuesUserEvent : NSObject

@property (nonatomic, copy, readonly) NSString *eventId;
@property (nonatomic, copy, readonly) NSString *name;
@property (nonatomic, strong, readonly) NSDictionary<NSString *, id> *customProperties;

- (AppcuesUserEvent *)initWithName:(NSString *)name
                  customProperties:(NSDictionary<NSString *, id> *)customProperties;
- (AppcuesUserEvent *)initWithName:(NSString *)name;

@end

// MARK: - Appcues

/*!
 @class Appcues

 @brief The Appcues SDK

 @discussion Represents the public facing interface of the Appcues SDK.
 */
@interface Appcues : NSObject

/*!
 Singleton instance of Appcues.
 */
@property (class, nonatomic, readonly, strong) Appcues *shared
NS_SWIFT_NAME(shared);

/*!
 Performs initial setup of the Appcues SDK.

 @pre `Appcues` SDK integration requires calling this method in your `UIApplicationDelegate` as follows:
 ```
 func applicationDidFinishLaunching(_ application: UIApplication) {
   Appcues.shared.setup()
   // your application's code here
 }
 ```
 */
- (void)setup
NS_SWIFT_NAME(setup());

/*!
 Used to allow `Appcues` to hook into the `UIApplicationDelegate`'s `application:open:options:` method.

 @pre `Appcues` SDK integration requires calling this method in your `UIApplicationDelegate` as follows:
 ```
 func application(_ app: UIApplication,
             open url: URL,
             options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {
   let result = Appcues.shared.application(app, open: url, options: options)
   // your application's code here
   return result
 }
 ```
 @pre The following URL scheme entry is added to the app's Info.plist:
 ```
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
    <key>CFBundleURLName</key>
    <string>com.appcues.scheme</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>$(PRODUCT_NAME)</string>
    </array>
  </dict>
</array>
 ```
 */
- (BOOL)application:(UIApplication *)application
            openURL:(NSURL *)url
            options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *)options
NS_SWIFT_NAME(application(_:openURL:options:));

/*!
 Saves an "anonymous" userId to encrypted storage, so that it can later be sent to the Appcues platform and used for Flow targeting. The id is a unique UUID
 which is generated by the SDK.
 */
- (void)identifyAnonymousUser
NS_SWIFT_NAME(identifyAnonymousUser());

/*!
 Saves the given userId to encrypted storage, so that it can later be sent to the Appcues platform and used for Flow targeting.

 @param userId The unique user identifier to record.
 */
- (void)identifyUserWithId:(NSString *)userId
NS_SWIFT_NAME(identifyUserWithId(userId:));

/*!
 Records the given `AppcuesUserProfileUpdate` in main memory, so that it can later be sent to the Appcues platform and used for Flow targeting.

 @param userProfileUpdate The `AppcuesUserProfileUpdate` to record, which includes a dictionary of custom properties. Any "null" string values
 included in the customProperties of the `AppcuesUserProfileUpdate` will clear previously recorded profile data after the activity is sent.
 */
- (void)recordUserProfileUpdate:(AppcuesUserProfileUpdate *)userProfileUpdate
NS_SWIFT_NAME(record(userProfileUpdate:));

/*!
 Records the given list of `AppcuesUserEvent`s in main memory, so that it can later be sent to the Appcues platform and used for Flow targeting.

 @param userEvents List of `AppcuesUserEvent`s to record, each identified by a name and optional custom properties.
 */
- (void)recordUserEvents:(NSArray<AppcuesUserEvent *> *)userEvents
NS_SWIFT_NAME(record(userEvents:));

/*!
 Sends all activity records to the Appcues platform and clears them from memory. Activities can trigger Flows which match their targeting. Any Flows shown after
 this method is called will be shown asychronously. If you want to listen for when the Flow presentation completes, use `sendActivitiesWithCompletion:` instead.

 @pre Before calling this function, make sure that your UI is stable and not undergoing updates, otherwise Flows may not show correctly. A recommended stable
 render point where you can add this call is a `UIViewController`'s `viewDidAppear:` method.
 */
- (void)sendActivities
NS_SWIFT_NAME(sendActivities());

/*!
 Sends all activity records to the Appcues platform and clears them from memory. Activities can trigger Flows which match their targeting. The completion
 callback is called either as soon as Appcues determines no Flows should be shown, or when users finish interacting with the Flows.

 @pre Before calling this function, make sure that your UI is stable and not undergoing updates, otherwise Flows may not show correctly. A recommended stable
 render point where you can add this call is a `UIViewController`'s `viewDidAppear:` method.
 */
- (void)sendActivitiesWithCompletion:(void (^)(void))completion
NS_SWIFT_NAME(sendActivities(completion:));

/*!
 Sends all activity records to the Appcues platform, without showing any Flows that match targeting.  Activities are cleared from memory.
 */
- (void)sendActivitiesIgnoringFlowsWithCompletion:(void (^)(void))completion
NS_SWIFT_NAME(sendActivitiesIgnoringFlows(completion:));

// [[PRIVATE-START]]// [[PRIVATE-END]]

@end

NS_ASSUME_NONNULL_END
